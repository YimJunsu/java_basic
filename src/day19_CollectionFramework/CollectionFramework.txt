1. 컬렉션 프레임워크란?
    - 자료구조 + 알고리즘이 구현된 자바 표준 라이브러리
    - 여러 데이터를 저장, 검색, 수정, 삭제 등 작업을 쉽게 할 수 있음
    - 인터페이스 기반 구조로 확장성과 유지보수성이 뛰어남

2. 주요 인터페이스
    - Collection	최상위 인터페이스 (List, Set, Queue의 부모)
    - List	        순서가 있는 데이터 집합, 중복 허용
    - Set	        순서가 없고, 중복을 허용하지 않음
    - Queue	        FIFO 방식, 줄 서기 구조
    - Map	        key-value 쌍으로 데이터 저장 (Collection 아님)

3. 주요 구현 클래스
<List> 계열
    - ArrayList	    배열 기반, 인덱스 접근 빠름, 삽입/삭제 느림
    - LinkedList	연결 리스트 기반, 삽입/삭제 빠름, 접근 느림
    - Vector	    동기화 지원, 거의 사용 안 함
ex) List<String> list = new ArrayList<>();
    list.add("Java");
    list.add("Python");
    System.out.println(list.get(0)); // Java

<Set> 계열
    - HashSet	    순서 없음, 중복 제거
    - LinkedHashSet	입력 순서 유지
    - TreeSet	    정렬된 순서로 저장 (Comparable 또는 Comparator 필요)
ex) Set<Integer> set = new HashSet<>();
    set.add(1); set.add(2); set.add(1);
    System.out.println(set); // [1, 2] (중복 제거됨)

<Queue> 계열
    - LinkedList	Queue로도 사용 가능
    - PriorityQueue	우선순위 기반 큐 (정렬된 형태로 저장)
ex) Queue<String> queue = new LinkedList<>();
    queue.add("첫 번째");
    queue.add("두 번째");
    System.out.println(queue.poll()); // 첫 번째

<Map> 계열
    - HashMap	가장 많이 사용됨, key 중복 불가
    - LinkedHashMap	입력 순서 유지
    - TreeMap	key 기준 정렬
ex) Map<String, Integer> map = new HashMap<>();
    map.put("A", 1);
    map.put("B", 2);
    System.out.println(map.get("A")); // 1

4. 컬렉션 유틸리티 클래스
    - Collections: 컬렉션 조작용 유틸리티 클래스 (정렬, 검색 등)
    ex) List<Integer> numbers = Arrays.asList(3, 1, 2);
        Collections.sort(numbers); // 오름차순 정렬
        System.out.println(numbers); // [1, 2, 3]

5. 제네릭과 컬렉션
    - 타입을 명시하여 타입 안정성 보장
    ex) List<String> names = new ArrayList<>();
        names.add("Alice"); // 안전함

6. 반복자(Iterator) 사용법
    - 반복자란? 컬렉션에 저장된 요소들을 하나씩 순차적으로 접근하기 위한 인터페이스, 컬렉션을 한칸씩 나가는 커서
        -> 컬렉션(List, Set등)의 요소를 반복적으로 순회할 때 사용
        -> while 루프나 for-each 보다 세밀한 제어 가능
        -> 요소 읽기 제거 가능, (수정 불가)

    - 반복문과 차이 : 반복문은 읽기 전용 반복에 적합하고 문법이 간단해 이해하기 쉽지만, 반복 중 요소 삭제에는 제약이 있음
                    반복자는 컬렉션을 순회하면서 요소를 안전하게 삭제할 수 있는 세밀한 제어가 가능
    ex) List<String> list = Arrays.asList("A", "B", "C");
        Iterator<String> it = list.iterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }

